- after basic django setup now move to react 
- verfiy npm by typing npm in music_controller directory 
- create new app in project , called front end , django-admin startapp frontend
- cd frontend, we'll place all react files in it 
- templates and static folder to be created in it 
- in the static folder place in CSS, frontend(contains main js) and images folder 
- create another folder in frontend app called "src" and in src we'll make componenets

- init an npm project, npm init -y command from frontend folder
- the above command creates a package.json file in the frontend folder
    - a file with the app name, its version and some other details 
    in json format

- npm i webpack webpack-cli --save-dev , this will take our all js resources and package it 
    as a singel module 
- transpile, take source code written in one high level language and convert it to another language 
to be sent to the second language's compiler 

- npm i @babel/core babel-loader @babel/preset-env @babel/preset-react --save-dev
to install babel, 

- npm i react react-dom --save-dev

- npm install @material-ui/core (for frontend same as bootstrap)

- npm install @babel/plugin-proposal-class-properties (async and await use in js)

- npm install react-router-dom (routing)

- npm install @material-ui/icons


Configurations scripts are for frontend app and we create files like babel.config.json
--> these set up the babel loader and its plugins, just copy paste from github https://github.com/techwithtim/Music-Controller-Web-App-Tutorial/blob/main/Tutorial%201%20-%204/frontend/babel.config.json
--> webpack.config.js (bundling of all js into one file) this file has the path for js entery and final placement of the 
compile file , https://github.com/techwithtim/Music-Controller-Web-App-Tutorial/blob/main/Tutorial%201%20-%204/frontend/webpack.config.js
--> in frontend/package.json in the scripts: directory we'll add  
{
    "dev": "webpack --mode development --watch",
    "build": "webpack --mode production"
  },

  https://github.com/techwithtim/Music-Controller-Web-App-Tutorial/blob/main/Tutorial%201%20-%204/frontend/package.json

--> in music_controller/frontend/src we'll make our entery file, named index.js,
    music_controller/frontend/src/index.js , note its ouside components folder

Basically our django will render a html and then react will take over it,


--> in music_controller/frontend/templates folder we'll make another folder called frontend and in it a file idex.html
    music_controller/frontend/templates/frontend/index.html

    In index.html we imported the static content in {%load static%} and added jquery and css style links
    in the body tag we have 2 divs main and app, react will work in the "app" div,
    lastly in the script tag we added the static path to frontend folder to file main.js, 
    --> the working is defined in webpack.config.js , the entery path is src/index.js that refers componenets and spit 
        out the compiled code as a main.js file in static/frontend

    code from src/index.js goes to webpack and comes out in music_controller/frontend/static/frontend/main.js

--> in views of frontend app we created a function to render the music_controller/frontend/templates/frontend/index.html file,
    and in the music_controller/urls.py we added the frontend link and created a urls.py in the frontend app to link to the index 
    view, 

--> now we created a App.js componenet in the src/componenets

    in this componenet we build a class based componenet App and made it a default export , in the same page we got the "app"
    div and render the app class in it ,render(<App />,appDiv)

--> in index.js we imported this componenet to be sent to webpack to be compiled,  

--> runserver , python manage.py runserver
--> in new terminal to initiate or run the react code , npm run dev or npm run build
    but this command should run where the frontend folder is, 
    --> Conflicting values for 'process.env.NODE_ENV 
        above error has the following solution
        --> in webpack.config.js i replaced the JSON.stringify("development") to JSON.stringify("production")

We create a index.css file in the frontend/static/css folder named index.css as it is being used in index.html,
in app.js we have react code and we have componenets that are rendered in the html div id=app , now componenets 
can be made and passed to each other with arguments called props and be rendered in the componenet itself
    --> Placed the App componenet in App.js in the app div of the index.html with props as i used name
    
    export default class App extends Component{
    constructor(props){
        super (props);
    }

    render(){
        return <h1>{this.props.name}</h1>;
    }
}

    const appDiv =document.getElementById("app");
    render (<App name="tim"/>,appDiv)
        
    --> state of a componenet is storage objects of the instance running, place in the constructor
    as this.state = {},


--> routing, HomePage.js to be made in src/componenets and imported in App.js and render by the App componenet
    RoomJoinPage.js, CreateRoomPage.js. import them in app.js
    In App.js we returned the render by using a parent div tag, if we dont it gives the error of parent tag missing

    render(){
            return (
                <div>
                    <HomePage />;
                    <RoomJoinPage/>;
                    <CreateRoomPage/>;
                </div>
            );
            
    }

    But we dont want componenets under each other but we want to route to the as normal html pages and django ways but here we 
    use react routing, 
    so in app.js we just render HomePage and in HomePage.js we import the routing functionality and use route and Routes method to 
    route through apps,the exact word in first route is to avoid the collision of paths that happens in react and to avoid its 
    necesary to use exact in duplicating paths (more in video 4 , after 21 min), but we need to work in the frontend/urls.py, to 
    have the routes registered in python as well, but the render the same index view,
    so the flow would be 

    --> views.py (index) renders index.html that has app div the has main.js that has app.js
    that has HomePage.js and HomePage.js all the routes of other componenets in it     
    
import {
    BrowserRouter as Router,
    Routes,
    Route,
    Link,
    Redirect,} from "react-router-dom";

    export default class HomePage extends Component{
    constructor(props){
        super(props);
    }
    render(){
        // return <p>This is the home page</p>
        return <Router>
            <Routes>
                <Route exact path='/' element={<Home />}></Route>
                <Route path='/join' element={<RoomJoinPage />}></Route>
                <Route path='/join' element={<CreateRoomPage />}/>
            </Routes>
        </Router>
    }
}
    function Home(){
    return(
        <div>
            <h1>This is the home Page</h1>
        </div>
    )
}

        previously Routes were switch and element were component



Creating API views:
In views.py of api import rest_framework.views (APIView and Response) .
In serializer.py of api we will make a serializer class CreateRoomSerializer(serializers.ModelSerializer),
and the fields we put here are guest_can_pause, votes_to_skip.
In views.py of api we created a class based view CreateRoomView and used the APIView, this allows us to write
GET, POST,PUT,DELETE methods sepratly. We use the CreateRoomSerializer as the serializer_class, next thing we use 
is the session key (django sessions).
--> def post(self,request,format=None) method uses django session to check for the session key of each instance 
    and pass on the data to the serializer, then we verify if a room object exists by passing the host, 
    if yes we update its parameters and if not we just create an object, interesting thing is that the queryset[0] will
    return me the object (point to remember). We created a route in the urls.py of the api app.
    


We'll work on front end in the CreateRoomPage.js and import a bunch of componenets from the @material-ui/core library
we use the grid container where spacing is in integer x 8px so {2} is 16 pixels, xs belongs to breakpoint class where 
There are five grid breakpoints: xs, sm, md, lg, and xl thats the width of the screen max value is 12 we can have multiple
xs sm and break the 12 among them
Then we use typography between the grid, when we use form control and form helper text the html code on inspect shows class
like <p class="MuiFormHelperText-root"><div align="center">Guest Control of Playback State</div></p> so to make them sepratly 
identified,we used radio buttons for the boolean field in the model , guest can pause. 

We use textfield to record the default votes and pass in the defualt value and for props we place a check of min 1 votes,
in button we used to and componenet value "Link" so that we can redirect the page on the url given in "to", 

We will use state to send information of form back/forth, we use states and method to set state when an event calls the method 
"handleVotesChange", if we link this method to an event i.e button clicked it will be stored in the 'e' and called by e.target.value
and for the boolean value we made the handleGuestCanPauseChange where the taget value is true or false,

TO use these methods we place it as <RadioGroup row defaultValue="true" onChange={this.handleGuestCanPauseChange}>, 
<TextField required={true} type="number" defaultValue= {this.defaultVotes} inputProps={{ min:1,style : {textAlign:"center"}}} onChange={this.handleVotesChange}/>

We dont use (e) with the method we use this.handleRoomButtonPressed =  this.handleRoomButtonPressed.bind(this) for each function in the class constructor, and in the button we 
used <Button color="primary" variant="contained" onClick={this.handleRoomButtonPressed}>

handleRoomButtonPressed(){ //created the method
        console.log(this.state); //check if the method is called
        const requestOptions = { //created a variable json object
            method: 'POST', //ajax call like statement , method = post 
            headers: {'Content-Type':'application/json'}, //header as boiler plate
            body: JSON.stringify({ //send data as json values
                    votes_to_skip: this.state.votesToSkip, //get values from the updated states
                    guest_can_pause: this.state.guestCanPause, //we use the same key as in views.py
            }),
        };
        fetch('/api/createroom',requestOptions)
        .then((response)=> //fetch method of react like python's reqeust 
        response.json())  // we made a django view under /api/createroom with a post method
        .then((data)=> console.log(data)) // and the response of the method is now logged

    }
